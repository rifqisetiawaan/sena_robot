// Generated by gencpp from file sena_message/encoder.msg
// DO NOT EDIT!


#ifndef SENA_MESSAGE_MESSAGE_ENCODER_H
#define SENA_MESSAGE_MESSAGE_ENCODER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sena_message
{
template <class ContainerAllocator>
struct encoder_
{
  typedef encoder_<ContainerAllocator> Type;

  encoder_()
    : enc1(0.0)
    , enc2(0.0)
    , enc3(0.0)  {
    }
  encoder_(const ContainerAllocator& _alloc)
    : enc1(0.0)
    , enc2(0.0)
    , enc3(0.0)  {
  (void)_alloc;
    }



   typedef float _enc1_type;
  _enc1_type enc1;

   typedef float _enc2_type;
  _enc2_type enc2;

   typedef float _enc3_type;
  _enc3_type enc3;





  typedef boost::shared_ptr< ::sena_message::encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sena_message::encoder_<ContainerAllocator> const> ConstPtr;

}; // struct encoder_

typedef ::sena_message::encoder_<std::allocator<void> > encoder;

typedef boost::shared_ptr< ::sena_message::encoder > encoderPtr;
typedef boost::shared_ptr< ::sena_message::encoder const> encoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sena_message::encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sena_message::encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sena_message::encoder_<ContainerAllocator1> & lhs, const ::sena_message::encoder_<ContainerAllocator2> & rhs)
{
  return lhs.enc1 == rhs.enc1 &&
    lhs.enc2 == rhs.enc2 &&
    lhs.enc3 == rhs.enc3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sena_message::encoder_<ContainerAllocator1> & lhs, const ::sena_message::encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sena_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sena_message::encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sena_message::encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sena_message::encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sena_message::encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sena_message::encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sena_message::encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sena_message::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b2d18c22293b69b292f5376e68afd3d";
  }

  static const char* value(const ::sena_message::encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b2d18c22293b69bULL;
  static const uint64_t static_value2 = 0x292f5376e68afd3dULL;
};

template<class ContainerAllocator>
struct DataType< ::sena_message::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sena_message/encoder";
  }

  static const char* value(const ::sena_message::encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sena_message::encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 enc1\n"
"float32 enc2\n"
"float32 enc3\n"
;
  }

  static const char* value(const ::sena_message::encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sena_message::encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enc1);
      stream.next(m.enc2);
      stream.next(m.enc3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sena_message::encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sena_message::encoder_<ContainerAllocator>& v)
  {
    s << indent << "enc1: ";
    Printer<float>::stream(s, indent + "  ", v.enc1);
    s << indent << "enc2: ";
    Printer<float>::stream(s, indent + "  ", v.enc2);
    s << indent << "enc3: ";
    Printer<float>::stream(s, indent + "  ", v.enc3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENA_MESSAGE_MESSAGE_ENCODER_H
